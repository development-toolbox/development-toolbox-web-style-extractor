"""
Modern CSS Generator Plugin
Generates cutting-edge CSS with OKLCH colors, container queries, and modern features
"""
import os
import logging
from pathlib import Path
from plugins.base_plugin import BaseGenerator
from typing import Dict, Any, List


class ModernCSSGeneratorPlugin(BaseGenerator):
    """Generates modern CSS with cutting-edge features"""
    
    @property
    def name(self) -> str:
        return "Modern CSS Generator"
    
    @property
    def output_format(self) -> str:
        return "modern-css"
    
    @property
    def description(self) -> str:
        return "Cutting-edge CSS with OKLCH colors, container queries, and modern CSS features"
    
    @property
    def emoji(self) -> str:
        return "ðŸš€"
        
    @property
    def short_description(self) -> str:
        return "Future-forward CSS with modern standards"
        
    @property
    def file_extension(self) -> str:
        return "css"
    
    @property
    def capabilities(self) -> list:
        return [
            'OKLCH color space',
            'Container queries',
            'CSS nesting',
            'Logical properties',
            'Modern selectors'
        ]
    
    @property
    def use_cases(self) -> list:
        return [
            'Future-proof applications',
            'Progressive enhancement',
            'Modern browser targets',
            'Advanced design systems'
        ]
    
    def generate(self, extraction_data: Dict[str, Any], output_path: str = None) -> Dict[str, Any]:
        """Generate modern CSS with cutting-edge features"""
        try:
            if not output_path:
                return {'success': False, 'error': 'Output path required'}
            
            # Create format-specific directory
            format_dir = Path(output_path) / 'modern-css'
            format_dir.mkdir(exist_ok=True)
            
            css_path = format_dir / 'styles.css'
            
            # Archive existing file if it exists
            if css_path.exists():
                self.archive_existing_file(css_path, format_dir)
            
            # Generate modern CSS
            css_content = self._generate_modern_css(extraction_data)
            
            # Write CSS file
            with open(css_path, 'w', encoding='utf-8') as f:
                f.write(css_content)
            
            # Create format-specific README
            self._create_format_readme(format_dir, css_content)
            
            logging.info(f"âœ… Modern CSS generated: {css_path}")
            
            return {
                'success': True,
                'file': str(css_path),
                'format': self.output_format,
                'content': css_content
            }
                
        except Exception as e:
            logging.error(f"Modern CSS generation failed: {e}")
            return {'success': False, 'error': str(e)}
    
    def _generate_modern_css(self, extraction_data: Dict[str, Any]) -> str:
        """Generate modern CSS with cutting-edge features"""
        
        # Get extraction results
        extraction_results = extraction_data.get('extraction', {})
        color_data = extraction_results.get('color_extractor', {})
        font_data = extraction_results.get('font_extractor', {})
        
        colors = color_data.get('colors', [])
        fonts = font_data.get('fonts', [])
        
        css_lines = [
            "/* Modern CSS with cutting-edge features */",
            "/* Generated by Web Style Extractor */",
            "",
            "/* CSS Custom Properties with OKLCH colors */",
            ":root {",
        ]
        
        # Add OKLCH color variables
        if colors:
            css_lines.append("  /* OKLCH Color Variables */")
            for i, color in enumerate(colors[:12]):  # Limit to 12 colors
                oklch_color = self._hex_to_oklch_approximation(color)
                css_lines.append(f"  --color-{i+1}-oklch: {oklch_color};")
                css_lines.append(f"  --color-{i+1}-hex: {color};")
            
            css_lines.extend([
                "",
                "  /* Semantic Color Mappings */",
                f"  --primary: {self._hex_to_oklch_approximation(colors[0]) if colors else 'oklch(0.7 0.15 260)'};",
                f"  --secondary: {self._hex_to_oklch_approximation(colors[1]) if len(colors) > 1 else 'oklch(0.6 0.1 260)'};",
                f"  --accent: {self._hex_to_oklch_approximation(colors[2]) if len(colors) > 2 else 'oklch(0.8 0.2 160)'};",
            ])
        
        # Add font variables
        valid_fonts = [f for f in fonts if not f.startswith('var(') and f not in ['inherit', 'initial']]
        if valid_fonts:
            css_lines.extend([
                "",
                "  /* Font Family Variables */",
                f"  --font-primary: '{valid_fonts[0]}', system-ui, sans-serif;",
                f"  --font-secondary: '{valid_fonts[1] if len(valid_fonts) > 1 else 'system-ui'}', sans-serif;",
                "  --font-mono: 'SF Mono', Monaco, 'Cascadia Code', 'Roboto Mono', Consolas, monospace;",
            ])
        
        # Add modern typography scale using clamp()
        css_lines.extend([
            "",
            "  /* Fluid Typography Scale */",
            "  --text-xs: clamp(0.75rem, 0.7rem + 0.25vw, 0.875rem);",
            "  --text-sm: clamp(0.875rem, 0.8rem + 0.375vw, 1rem);",
            "  --text-base: clamp(1rem, 0.9rem + 0.5vw, 1.125rem);",
            "  --text-lg: clamp(1.125rem, 1rem + 0.625vw, 1.25rem);",
            "  --text-xl: clamp(1.25rem, 1.1rem + 0.75vw, 1.5rem);",
            "  --text-2xl: clamp(1.5rem, 1.3rem + 1vw, 2rem);",
            "",
            "  /* Fluid Spacing Scale */",
            "  --space-xs: clamp(0.25rem, 0.2rem + 0.25vw, 0.5rem);",
            "  --space-sm: clamp(0.5rem, 0.4rem + 0.5vw, 1rem);",
            "  --space-md: clamp(1rem, 0.8rem + 1vw, 2rem);",
            "  --space-lg: clamp(1.5rem, 1.2rem + 1.5vw, 3rem);",
            "  --space-xl: clamp(2rem, 1.6rem + 2vw, 4rem);",
            "}",
            "",
        ])
        
        # Add modern utility classes with nesting
        css_lines.extend([
            "/* Modern Utility Classes with CSS Nesting */",
            ".color-utilities {",
            "  /* Background colors */",
        ])
        
        for i in range(min(8, len(colors))):
            css_lines.append(f"  .bg-color-{i+1} {{ background: var(--color-{i+1}-oklch); }}")
            css_lines.append(f"  .text-color-{i+1} {{ color: var(--color-{i+1}-oklch); }}")
        
        css_lines.extend([
            "}",
            "",
            "/* Container Query Components */",
            ".card {",
            "  container-type: inline-size;",
            "  container-name: card;",
            "  background: var(--primary);",
            "  border-radius: 1rem;",
            "  padding: var(--space-md);",
            "",
            "  @container card (min-width: 300px) {",
            "    padding: var(--space-lg);",
            "    ",
            "    .card-title {",
            "      font-size: var(--text-xl);",
            "    }",
            "  }",
            "",
            "  @container card (min-width: 500px) {",
            "    display: grid;",
            "    grid-template-columns: 1fr 2fr;",
            "    gap: var(--space-md);",
            "  }",
            "}",
            "",
            "/* Modern Layout with Logical Properties */",
            ".layout {",
            "  margin-block: var(--space-lg);",
            "  margin-inline: auto;",
            "  padding-block: var(--space-md);",
            "  padding-inline: var(--space-md);",
            "  max-inline-size: 1200px;",
            "}",
            "",
            "/* Advanced Selectors */",
            ".interactive {",
            "  /* :has() selector for parent styling */",
            "  &:has(:focus-visible) {",
            "    outline: 2px solid var(--accent);",
            "    outline-offset: 2px;",
            "  }",
            "",
            "  /* :is() for efficient grouping */",
            "  :is(button, a, [role='button']) {",
            "    transition: all 0.2s ease;",
            "    ",
            "    &:hover {",
            "      transform: translateY(-1px);",
            "    }",
            "  }",
            "}",
            "",
            "/* Color Contrast and Accessibility */",
            "@media (prefers-color-scheme: dark) {",
            "  :root {",
            "    --primary: oklch(0.3 0.15 260);",
            "    --secondary: oklch(0.4 0.1 260);",
            "    --text-primary: oklch(0.9 0.02 260);",
            "  }",
            "}",
            "",
            "@media (prefers-reduced-motion: reduce) {",
            "  * {",
            "    animation-duration: 0.01ms !important;",
            "    animation-iteration-count: 1 !important;",
            "    transition-duration: 0.01ms !important;",
            "  }",
            "}",
            "",
            "/* Print Styles with Modern Units */",
            "@media print {",
            "  .card {",
            "    break-inside: avoid;",
            "    margin-block-end: 1rem;",
            "  }",
            "",
            "  .no-print {",
            "    display: none;",
            "  }",
            "}",
        ])
        
        return "\n".join(css_lines)
    
    def _hex_to_oklch_approximation(self, hex_color: str) -> str:
        """Convert hex to approximate OKLCH (simplified conversion)"""
        # Remove # if present
        hex_color = hex_color.lstrip('#')
        
        # Simple approximation - in reality you'd use proper color conversion
        # This is just for demo purposes
        if len(hex_color) == 6:
            r = int(hex_color[0:2], 16) / 255
            g = int(hex_color[2:4], 16) / 255
            b = int(hex_color[4:6], 16) / 255
            
            # Very rough approximation to OKLCH
            lightness = (r + g + b) / 3
            chroma = max(r, g, b) - min(r, g, b)
            
            # Rough hue calculation
            if chroma == 0:
                hue = 0
            elif max(r, g, b) == r:
                hue = 60 * ((g - b) / chroma)
            elif max(r, g, b) == g:
                hue = 60 * (2 + (b - r) / chroma)
            else:
                hue = 60 * (4 + (r - g) / chroma)
            
            if hue < 0:
                hue += 360
            
            return f"oklch({lightness:.3f} {chroma:.3f} {hue:.0f})"
        
        return f"oklch(0.7 0.1 260)"  # Fallback
    
    def _create_format_readme(self, format_dir: Path, css_content: str):
        """Create format-specific README with usage instructions"""
        readme_content = """# Modern CSS Usage

This directory contains cutting-edge CSS with modern features and OKLCH color space.

## Files
- `styles.css` - Modern CSS with OKLCH colors, container queries, and advanced features

## Features Included

### OKLCH Color Space
- Perceptually uniform colors
- Better color interpolation
- Future-proof color definitions
- Dark mode optimizations

### Container Queries
- Element-based responsive design
- Component-level breakpoints
- Better encapsulation than media queries

### CSS Nesting
- Sass-like nesting in vanilla CSS
- Cleaner, more maintainable code
- Reduced repetition

### Logical Properties
- Internationalization-ready
- Writing mode independence
- Better RTL support

## Browser Support

### Full Support
- Chrome 111+
- Firefox 113+
- Safari 16.5+
- Edge 111+

### Progressive Enhancement
The CSS includes fallbacks for older browsers and uses feature detection.

## Usage Examples

### HTML
```html
<!DOCTYPE html>
<html lang="en">
<head>
  <link rel="stylesheet" href="styles.css">
</head>
<body>
  <div class="layout">
    <div class="card">
      <h2 class="card-title">Modern Card</h2>
      <p class="text-color-1">Using OKLCH colors</p>
    </div>
  </div>
</body>
</html>
```

### PostCSS Configuration
```javascript
module.exports = {
  plugins: [
    require('postcss-preset-env')({
      stage: 1, // Enable cutting-edge features
      features: {
        'oklab-function': true,
        'relative-color-syntax': true,
        'container-queries': true
      }
    }),
    require('autoprefixer')
  ]
}
```

### Vite Configuration
```javascript
import { defineConfig } from 'vite'

export default defineConfig({
  css: {
    postcss: {
      plugins: [
        require('postcss-preset-env')({
          stage: 1,
          features: {
            'custom-properties': false, // Already supported
            'oklab-function': true,
            'container-queries': true
          }
        })
      ]
    }
  }
})
```

### Build Process
```bash
# Install PostCSS and plugins
npm install -D postcss postcss-preset-env autoprefixer

# Process CSS
npx postcss styles.css -o dist/styles.css
```

## Color System

### OKLCH Variables
```css
:root {
  --color-1-oklch: oklch(0.7 0.15 260);
  --color-1-hex: #3b82f6; /* Fallback */
}
```

### Usage
```css
.modern-button {
  background: var(--primary);
  color: oklch(from var(--primary) calc(l + 0.2) c h);
}
```

## Container Queries

```css
.component {
  container-type: inline-size;
  
  @container (min-width: 300px) {
    /* Styles when container is 300px+ wide */
  }
}
```

## Accessibility Features

- Respects `prefers-color-scheme`
- Honors `prefers-reduced-motion`
- Uses semantic color naming
- Provides sufficient contrast ratios

## Performance

- Uses native CSS features
- Minimal runtime overhead
- Optimized for modern browsers
- Progressive enhancement approach

Generated by Web Style Extractor"""
        
        readme_path = format_dir / 'README.md'
        readme_path.write_text(readme_content, encoding='utf-8')


def get_generator():
    return ModernCSSGeneratorPlugin()