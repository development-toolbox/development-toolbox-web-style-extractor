"""
BookStack CSS theme generator plugin
"""
import os
import io
import logging
import requests
from datetime import datetime
from pathlib import Path
from PIL import Image
from jinja2 import Template
from plugins.base_plugin import BaseGenerator
from typing import Dict, Any


class BookStackGenerator(BaseGenerator):
    @property
    def name(self):
        return "bookstack_generator"
    
    @property
    def output_format(self):
        return "bookstack"
    
    def generate(self, extraction_data: Dict[str, Any], output_path: str = None) -> Dict[str, Any]:
        """Generate complete BookStack template package"""
        
        if not output_path:
            return {'error': 'Output path required for BookStack generator'}
        
        # Create format-specific directory
        format_dir = Path(output_path) / 'bookstack'
        format_dir.mkdir(exist_ok=True)
        
        # Create BookStack template directory inside format_dir
        bookstack_dir = format_dir / 'bookstack_template'
        assets_dir = bookstack_dir / 'assets'
        bookstack_dir.mkdir(exist_ok=True)
        assets_dir.mkdir(exist_ok=True)
        
        results = {
            'generator': 'BookStack Theme Generator',
            'timestamp': datetime.now().isoformat()
        }
        
        # Generate CSS theme
        css_content = self._generate_css_theme(extraction_data)
        css_path = bookstack_dir / 'custom.css'
        
        # Check if file exists and archive using base class method
        if css_path.exists():
            self.archive_existing_file(css_path, format_dir)
        
        # Write new file
        with open(css_path, 'w', encoding='utf-8') as f:
            f.write(css_content)
        results['css_file'] = str(css_path)
        
        # Download and process branding assets
        if 'branding_extractor' in extraction_data.get('extraction', {}):
            branding = extraction_data['extraction']['branding_extractor']
            assets = self._process_branding_assets(branding, str(assets_dir))
            results['assets'] = assets
        
        # Generate installation guide
        guide_path = self._generate_installation_guide(bookstack_dir, extraction_data)
        results['installation_guide'] = guide_path
        
        # Generate example configuration
        config_path = self._generate_bookstack_config(bookstack_dir, extraction_data)
        results['config_example'] = config_path
        
        # Create format-specific README
        self._create_format_readme(format_dir, extraction_data)
        
        return results
    
    def _generate_css_theme(self, data: Dict[str, Any]) -> str:
        """Generate BookStack CSS using Jinja2 template"""
        template_path = os.path.join(os.path.dirname(__file__), 'templates', 'bookstack.css.j2')
        
        try:
            with open(template_path, 'r', encoding='utf-8') as f:
                template = Template(f.read())
        except FileNotFoundError:
            # Fallback to inline template if file doesn't exist
            template = Template(self._get_inline_css_template())
        
        return template.render(
            extraction=data.get('extraction', {}),
            url=data.get('url', ''),
            generated_at=datetime.now().strftime('%Y-%m-%d %H:%M:%S')
        )
    
    def _get_inline_css_template(self) -> str:
        """Inline CSS template as fallback"""
        return """/*
 * BookStack Custom Theme - Generated by Web Style Extractor
 * Generated from: {{ url }}
 * Generated at: {{ generated_at }}
 * 
 * Installation:
 * 1. Copy this file to your BookStack themes/custom/ directory
 * 2. Add to Settings > Customization > Custom HTML Head Content:
 *    <link rel="stylesheet" href="/themes/custom/custom.css">
 */

:root {
    /* Primary Brand Colors */
    {% if extraction.color_extractor and extraction.color_extractor.colors %}
    --color-primary: {{ extraction.color_extractor.colors[0] if extraction.color_extractor.colors else '#0066cc' }};
    --color-primary-light: {{ extraction.color_extractor.colors[1] if extraction.color_extractor.colors|length > 1 else '#3388dd' }};
    --color-primary-dark: {{ extraction.color_extractor.colors[2] if extraction.color_extractor.colors|length > 2 else '#004499' }};
    --color-accent: {{ extraction.color_extractor.colors[3] if extraction.color_extractor.colors|length > 3 else '#ff6b35' }};
    {% else %}
    --color-primary: #0066cc;
    --color-primary-light: #3388dd;
    --color-primary-dark: #004499;
    --color-accent: #ff6b35;
    {% endif %}
    
    /* Typography */
    {% if extraction.font_extractor and extraction.font_extractor.fonts %}
    --font-heading: '{{ extraction.font_extractor.fonts[0] if extraction.font_extractor.fonts else 'system-ui' }}', system-ui, sans-serif;
    --font-body: '{{ extraction.font_extractor.fonts[1] if extraction.font_extractor.fonts|length > 1 else 'system-ui' }}', system-ui, sans-serif;
    {% else %}
    --font-heading: system-ui, sans-serif;
    --font-body: system-ui, sans-serif;
    {% endif %}
    
    /* Layout */
    --header-height: 60px;
    --sidebar-width: 280px;
    --border-radius: 6px;
    --transition: all 0.2s ease;
}

/* ===== BOOKSTACK HEADER ===== */
.header {
    background: linear-gradient(135deg, var(--color-primary), var(--color-primary-dark)) !important;
    border-bottom: none !important;
    box-shadow: 0 2px 4px rgba(0,0,0,0.1) !important;
}

.header .navbar-brand {
    color: white !important;
    font-family: var(--font-heading) !important;
    font-weight: 600 !important;
    font-size: 1.2rem !important;
}

.header .navbar-nav .nav-link {
    color: rgba(255, 255, 255, 0.9) !important;
    font-family: var(--font-body) !important;
    transition: var(--transition) !important;
}

.header .navbar-nav .nav-link:hover {
    color: white !important;
    background: rgba(255, 255, 255, 0.1) !important;
    border-radius: var(--border-radius) !important;
}

/* ===== BOOKSTACK SIDEBAR ===== */
.sidebar {
    border-right: 1px solid rgba(0, 102, 204, 0.1) !important;
    background: #fafafa !important;
}

.sidebar .book-tree a {
    font-family: var(--font-body) !important;
    color: #333 !important;
    border-radius: var(--border-radius) !important;
    transition: var(--transition) !important;
    margin: 2px 0 !important;
}

.sidebar .book-tree a:hover {
    background: var(--color-primary-light) !important;
    color: white !important;
    text-decoration: none !important;
    transform: translateX(4px) !important;
}

.sidebar .book-tree .selected {
    background: var(--color-primary) !important;
    color: white !important;
    font-weight: 500 !important;
}

/* ===== BOOKSTACK CONTENT ===== */
.page-content h1, .page-content h2, .page-content h3,
.page-content h4, .page-content h5, .page-content h6 {
    font-family: var(--font-heading) !important;
    color: var(--color-primary-dark) !important;
}

.page-content h1 {
    border-bottom: 3px solid var(--color-primary) !important;
    padding-bottom: 12px !important;
    margin-bottom: 24px !important;
}

.page-content h2 {
    border-bottom: 2px solid var(--color-primary-light) !important;
    padding-bottom: 8px !important;
    margin-bottom: 16px !important;
}

/* ===== BOOKSTACK BUTTONS ===== */
.btn-primary, .button-primary {
    background: linear-gradient(135deg, var(--color-primary), var(--color-primary-dark)) !important;
    border-color: var(--color-primary) !important;
    border-radius: var(--border-radius) !important;
    font-family: var(--font-body) !important;
    transition: var(--transition) !important;
    box-shadow: 0 2px 4px rgba(0,0,0,0.1) !important;
}

.btn-primary:hover, .button-primary:hover {
    background: var(--color-primary-dark) !important;
    border-color: var(--color-primary-dark) !important;
    transform: translateY(-1px) !important;
    box-shadow: 0 4px 8px rgba(0,0,0,0.15) !important;
}

.btn-secondary, .button-secondary {
    background: var(--color-accent) !important;
    border-color: var(--color-accent) !important;
    border-radius: var(--border-radius) !important;
    transition: var(--transition) !important;
}

/* ===== BOOKSTACK CARDS & PANELS ===== */
.card, .panel {
    border-radius: var(--border-radius) !important;
    border: 1px solid rgba(0, 102, 204, 0.1) !important;
    box-shadow: 0 2px 4px rgba(0,0,0,0.05) !important;
    transition: var(--transition) !important;
}

.card:hover, .panel:hover {
    box-shadow: 0 4px 12px rgba(0,0,0,0.1) !important;
    transform: translateY(-2px) !important;
}

.card-header, .panel-heading {
    background: linear-gradient(135deg, var(--color-primary), var(--color-primary-light)) !important;
    color: white !important;
    font-family: var(--font-heading) !important;
    border-radius: var(--border-radius) var(--border-radius) 0 0 !important;
    border-bottom: none !important;
}

/* ===== BOOKSTACK TABLES ===== */
.table th {
    background: var(--color-primary) !important;
    color: white !important;
    font-family: var(--font-heading) !important;
    border: none !important;
    font-weight: 500 !important;
}

.table td {
    font-family: var(--font-body) !important;
    border-bottom: 1px solid rgba(0, 102, 204, 0.1) !important;
}

.table-striped tbody tr:nth-of-type(odd) {
    background: rgba(0, 102, 204, 0.03) !important;
}

/* ===== CUSTOM LOGO INTEGRATION ===== */
{% if extraction.branding_extractor and extraction.branding_extractor.logo_url %}
.header .navbar-brand::before {
    content: '';
    background-image: url('assets/logo.png');
    background-size: contain;
    background-repeat: no-repeat;
    background-position: center;
    width: 32px;
    height: 32px;
    display: inline-block;
    margin-right: 12px;
    vertical-align: middle;
}
{% endif %}

/* ===== SEARCH ENHANCEMENTS ===== */
.search-box input {
    border-radius: var(--border-radius) !important;
    border: 1px solid var(--color-primary-light) !important;
    transition: var(--transition) !important;
}

.search-box input:focus {
    border-color: var(--color-primary) !important;
    box-shadow: 0 0 0 3px rgba(0, 102, 204, 0.1) !important;
}

/* ===== RESPONSIVE DESIGN ===== */
@media (max-width: 768px) {
    .sidebar {
        transform: translateX(-100%);
        transition: transform 0.3s ease;
    }
    
    .sidebar.show {
        transform: translateX(0);
    }
    
    .header .navbar-brand {
        font-size: 1rem !important;
    }
    
    .page-content h1 {
        font-size: 1.8rem !important;
    }
}

/* ===== DARK MODE SUPPORT ===== */
@media (prefers-color-scheme: dark) {
    :root {
        --color-primary: {{ extraction.color_extractor.colors[0] if extraction.color_extractor and extraction.color_extractor.colors else '#4a9eff' }};
        --color-primary-light: #66b3ff;
        --color-primary-dark: #2d85e8;
    }
    
    .sidebar {
        background: #2a2a2a !important;
        color: #e0e0e0 !important;
    }
    
    .page-content {
        background: #1a1a1a !important;
        color: #e0e0e0 !important;
    }
    
    .card, .panel {
        background: #2a2a2a !important;
        border-color: #404040 !important;
    }
}

/* ===== ACCESSIBILITY IMPROVEMENTS ===== */
.btn:focus,
button:focus,
input:focus,
select:focus,
textarea:focus {
    outline: 3px solid var(--color-primary) !important;
    outline-offset: 2px !important;
}

/* High contrast mode support */
@media (prefers-contrast: high) {
    :root {
        --color-primary: #0000cc;
        --color-primary-dark: #000099;
    }
}"""
    
    def _process_branding_assets(self, branding_data: Dict[str, Any], assets_dir: str) -> Dict[str, Any]:
        """Download and optimize branding assets"""
        assets = {}
        
        # Download logo if available
        if branding_data.get('logo_url'):
            logo_path = self._download_and_optimize_image(
                branding_data['logo_url'], 
                assets_dir, 
                'logo', 
                (200, 60)  # BookStack header logo size
            )
            if logo_path:
                assets['logo'] = logo_path
        
        # Download favicon if available
        if branding_data.get('favicon_url'):
            favicon_path = self._download_and_optimize_image(
                branding_data['favicon_url'],
                assets_dir,
                'favicon',
                (32, 32)
            )
            if favicon_path:
                assets['favicon'] = favicon_path
        
        return assets
    
    def _download_and_optimize_image(self, url: str, output_dir: str, name: str, size: tuple) -> str:
        """Download and optimize image for BookStack"""
        try:
            response = requests.get(url, timeout=10)
            response.raise_for_status()
            
            # Determine file extension
            ext = 'png'  # Default to PNG for better quality
            if '.ico' in url.lower():
                ext = 'ico'
            elif '.svg' in url.lower():
                ext = 'svg'
            elif '.jpg' in url.lower() or '.jpeg' in url.lower():
                ext = 'jpg'
            
            filename = f"{name}.{ext}"
            filepath = os.path.join(output_dir, filename)
            
            if ext == 'svg':
                # Save SVG as-is
                with open(filepath, 'wb') as f:
                    f.write(response.content)
            else:
                # Process raster images
                try:
                    with Image.open(io.BytesIO(response.content)) as img:
                        # Convert to RGBA for transparency support
                        if img.mode != 'RGBA':
                            img = img.convert('RGBA')
                        
                        # Resize to target size while maintaining aspect ratio
                        img.thumbnail(size, Image.Resampling.LANCZOS)
                        
                        # Save optimized image
                        if ext == 'png':
                            img.save(filepath, 'PNG', optimize=True)
                        elif ext == 'jpg':
                            # Convert to RGB for JPEG
                            rgb_img = Image.new('RGB', img.size, (255, 255, 255))
                            rgb_img.paste(img, mask=img.split()[-1] if img.mode == 'RGBA' else None)
                            rgb_img.save(filepath, 'JPEG', optimize=True, quality=85)
                        else:
                            img.save(filepath, optimize=True)
                except Exception as e:
                    # If Pillow processing fails, save as-is
                    logging.debug(f"Could not process image {url}: {e}, saving as-is")
                    with open(filepath, 'wb') as f:
                        f.write(response.content)
            
            return filepath
            
        except Exception as e:
            logging.warning(f"Could not process {name} from {url}: {e}")
            return None
    
    def _generate_installation_guide(self, output_dir: str, data: Dict[str, Any]) -> str:
        """Generate BookStack installation guide"""
        template_content = self._get_installation_guide_template()
        template = Template(template_content)
        
        guide_content = template.render(
            extraction=data.get('extraction', {}),
            url=data.get('url', ''),
            generated_at=datetime.now().strftime('%Y-%m-%d %H:%M:%S')
        )
        
        guide_path = Path(output_dir) / 'README.md'
        
        # Check if file exists and archive if needed (though unlikely for README)
        # We'll skip archiving for README as it's documentation
        
        with open(guide_path, 'w', encoding='utf-8') as f:
            f.write(guide_content)
        
        return str(guide_path)
    
    def _get_installation_guide_template(self) -> str:
        """Installation guide template"""
        return """# BookStack Theme Installation Guide

## 🎨 Custom Theme Generated from Website Analysis

This BookStack theme was automatically generated by analyzing the design system of {{ url }}.

### 📊 Extracted Design Elements

**Colors Found:**
{% if extraction.color_extractor and extraction.color_extractor.colors %}
{% for color in extraction.color_extractor.colors[:8] %}
- **Color {{ loop.index }}**: `{{ color }}`
{% endfor %}
{% else %}
- No colors detected - using default theme colors
{% endif %}

**Typography:**
{% if extraction.font_extractor and extraction.font_extractor.fonts %}
{% for font in extraction.font_extractor.fonts[:5] %}
- **Font {{ loop.index }}**: {{ font }}
{% endfor %}
{% else %}
- No custom fonts detected - using system fonts
{% endif %}

**Branding Assets:**
{% if extraction.branding_extractor %}
- Logo: {% if extraction.branding_extractor.logo_url %}✅ Detected and downloaded{% else %}❌ Not found{% endif %}
- Favicon: {% if extraction.branding_extractor.favicon_url %}✅ Detected and downloaded{% else %}❌ Not found{% endif %}
- Organization: {% if extraction.branding_extractor.organization %}{{ extraction.branding_extractor.organization }}{% else %}Not detected{% endif %}
{% else %}
- ❌ No branding assets detected
{% endif %}

---

## 🚀 Installation Steps

### 1. Upload Theme Files

Copy the generated files to your BookStack installation:

```bash
# Copy CSS theme
cp custom.css /path/to/bookstack/themes/custom/

# Copy assets (if any)
cp -r assets/ /path/to/bookstack/themes/custom/
```

### 2. Configure BookStack

Add to your BookStack `.env` file:

```env
# Enable custom theme
APP_THEME=custom

# Optional: Custom app name
{% if extraction.branding_extractor and extraction.branding_extractor.organization %}
APP_NAME="{{ extraction.branding_extractor.organization }}"
{% else %}
APP_NAME="Your Organization"
{% endif %}
```

### 3. Apply Theme

In your BookStack settings:

1. Go to **Settings** → **Customization**
2. **Custom HTML Head Content**, add:

```html
<link rel="stylesheet" href="/themes/custom/custom.css">
```

3. Save settings

### 4. Restart BookStack

```bash
# Clear cache and restart
php artisan cache:clear
php artisan config:clear
sudo systemctl restart apache2  # or nginx
```

---

## 🎯 Customization Options

### Colors
The theme uses CSS custom properties. Override any color by adding to your CSS:

```css
:root {
    --color-primary: #your-color;
    --color-primary-light: #your-light-color;
    --color-primary-dark: #your-dark-color;
}
```

### Typography
Change fonts by modifying:

```css
:root {
    --font-heading: 'Your Font', sans-serif;
    --font-body: 'Your Body Font', sans-serif;
}
```

### Logo
{% if extraction.branding_extractor and extraction.branding_extractor.logo_url %}
Your logo is automatically integrated in the header. To adjust:

```css
.header .navbar-brand::before {
    width: 40px;  /* Adjust size */
    height: 40px;
}
```
{% else %}
To add your logo, place `logo.png` in `/themes/custom/assets/` and it will automatically appear in the header.
{% endif %}

---

## 🔧 Troubleshooting

**Theme not loading?**
- Check file permissions: `chmod 644 custom.css`
- Verify path: `/themes/custom/custom.css`
- Clear browser cache

**Colors not showing?**
- Check CSS syntax in custom.css
- Verify CSS is loading in browser dev tools

**Logo not appearing?**
- Ensure logo.png exists in `/themes/custom/assets/`
- Check image format (PNG, JPG, SVG supported)

---

## 📝 Generated Information

- **Generated on**: {{ generated_at }}
- **Source website**: {{ url }}
- **Generator version**: Web Style Extractor v2.0
- **Theme compatibility**: BookStack v22.0+

---

## 💡 Need Help?

- [BookStack Documentation](https://www.bookstackapp.com/docs/)
- [Customization Guide](https://www.bookstackapp.com/docs/admin/settings/)
- [Web Style Extractor GitHub](https://github.com/your-repo/web-style-extractor)

Enjoy your custom BookStack theme! 🎉"""
    
    def _generate_bookstack_config(self, output_dir: str, data: Dict[str, Any]) -> str:
        """Generate example BookStack configuration"""
        config_content = """# BookStack Configuration Example
# Add these settings to your .env file

# Application Settings
APP_NAME="Your Organization"
APP_URL=https://your-bookstack-domain.com

# Theme Settings  
APP_THEME=custom

# Custom HTML Head Content (add via web interface)
# Settings > Customization > Custom HTML Head Content:
<link rel="stylesheet" href="/themes/custom/custom.css">

# Optional: Custom favicon
<link rel="icon" type="image/png" href="/themes/custom/assets/favicon.png">

# Custom Footer Content (optional)
# You can add attribution or custom links here
"""
        
        config_path = Path(output_dir) / 'bookstack-config.txt'
        
        # Check if file exists and archive if needed
        # We'll skip archiving for config files as they're documentation
        
        with open(config_path, 'w', encoding='utf-8') as f:
            f.write(config_content)
        
        return str(config_path)
    
    def _create_format_readme(self, format_dir: Path, extraction_data: dict):
        """Create format-specific README with usage instructions"""
        readme_content = f"""# BookStack Theme Format Usage

This directory contains a complete BookStack theme package extracted from website styles.

## Files
- `bookstack_template/custom.css` - Main BookStack theme CSS file
- `bookstack_template/assets/` - Logo and branding assets (if available)
- `bookstack_template/README.md` - Detailed installation guide
- `bookstack_template/bookstack-config.txt` - Configuration examples

## Quick Installation

### 1. Copy Files to BookStack
```bash
# Copy the CSS theme
sudo cp bookstack_template/custom.css /var/www/bookstack/themes/custom/

# Copy assets (if any exist)
sudo cp -r bookstack_template/assets/ /var/www/bookstack/themes/custom/

# Set proper permissions
sudo chown -R www-data:www-data /var/www/bookstack/themes/custom/
sudo chmod -R 644 /var/www/bookstack/themes/custom/
```

### 2. Enable in BookStack Settings
1. Go to **Settings** → **Customization**
2. In **Custom HTML Head Content**, add:
   ```html
   <link rel="stylesheet" href="/themes/custom/custom.css">
   ```
3. Save settings

### 3. Clear Cache
```bash
cd /var/www/bookstack
sudo -u www-data php artisan cache:clear
sudo -u www-data php artisan config:clear
```

## Theme Features

### Extracted Design Elements
- **Custom color palette** from the source website
- **Typography** matching the original site fonts
- **Branding integration** with logo and favicon support
- **Responsive design** for mobile and desktop
- **Dark mode support** with automatic detection
- **Accessibility improvements** with proper focus states

### BookStack Integration
- **Header styling** with custom navigation colors
- **Sidebar theming** with hover effects and active states
- **Content styling** with custom heading styles
- **Button themes** matching the brand colors
- **Card/panel styling** with consistent design
- **Table theming** with branded header colors

## Customization

### Override Colors
The theme uses CSS custom properties for easy customization:

```css
:root {{
  --color-primary: #your-primary-color;
  --color-primary-light: #your-light-color;
  --color-primary-dark: #your-dark-color;
  --color-accent: #your-accent-color;
}}
```

### Modify Typography
```css
:root {{
  --font-heading: 'Your Heading Font', system-ui, sans-serif;
  --font-body: 'Your Body Font', system-ui, sans-serif;
}}
```

### Adjust Logo Size
If you have a custom logo:

```css
.header .navbar-brand::before {{
  width: 40px;  /* Adjust as needed */
  height: 40px;
  margin-right: 12px;
}}
```

## Advanced Configuration

### Environment Variables
Add to your BookStack `.env` file:

```env
# Custom app name
APP_NAME="Your Organization"

# Custom theme
APP_THEME=custom

# Custom app URL
APP_URL=https://your-bookstack.domain.com
```

### Multi-instance Setup
For multiple BookStack instances sharing the same theme:

```bash
# Create shared theme directory
sudo mkdir -p /usr/share/bookstack-themes/custom
sudo cp bookstack_template/custom.css /usr/share/bookstack-themes/custom/

# Link from each instance
sudo ln -s /usr/share/bookstack-themes/custom /var/www/bookstack1/themes/custom
sudo ln -s /usr/share/bookstack-themes/custom /var/www/bookstack2/themes/custom
```

### Docker Setup
For BookStack running in Docker:

```dockerfile
# Dockerfile
FROM solidnerd/bookstack:latest

# Copy theme files
COPY bookstack_template/custom.css /var/www/bookstack/themes/custom/
COPY bookstack_template/assets/ /var/www/bookstack/themes/custom/assets/

# Set permissions
RUN chown -R www-data:www-data /var/www/bookstack/themes/custom/
```

Or with docker-compose:

```yaml
version: '3.8'
services:
  bookstack:
    image: solidnerd/bookstack:latest
    volumes:
      - ./bookstack_template/custom.css:/var/www/bookstack/themes/custom/custom.css:ro
      - ./bookstack_template/assets/:/var/www/bookstack/themes/custom/assets/:ro
    environment:
      - APP_THEME=custom
```

## Testing the Theme

### Browser Testing
1. Open BookStack in your browser
2. Check that custom colors appear in the header
3. Verify sidebar styling matches the theme
4. Test responsive behavior on mobile
5. Check dark mode functionality (if supported by browser)

### CSS Validation
```bash
# Validate CSS syntax
css-validator bookstack_template/custom.css

# Check for accessibility issues
axe-core bookstack_template/custom.css
```

## Troubleshooting

### Common Issues

**Theme not loading:**
- Verify file path: `/themes/custom/custom.css`
- Check file permissions: `chmod 644 custom.css`
- Clear browser cache and BookStack cache
- Check browser console for CSS errors

**Colors not appearing:**
- Verify CSS custom properties syntax
- Check for CSS conflicts with other stylesheets
- Ensure the HTML head content was added correctly

**Logo not showing:**
- Confirm logo file exists in `/themes/custom/assets/logo.png`
- Check image format (PNG, JPG, SVG supported)
- Verify file permissions on assets directory

**Mobile layout issues:**
- Test responsive breakpoints
- Check sidebar collapse functionality
- Verify touch targets are appropriately sized

### Debug Mode
Enable BookStack debug mode to see detailed error messages:

```env
# .env file
APP_DEBUG=true
APP_ENV=local
```

### Log Files
Check BookStack logs for theme-related issues:

```bash
# View recent logs
tail -f /var/www/bookstack/storage/logs/laravel.log

# Search for theme-related errors
grep -i "theme\|css" /var/www/bookstack/storage/logs/laravel.log
```

## Browser Support

### Modern Features Used
- **CSS Custom Properties** (IE 11+, all modern browsers)
- **CSS Grid** (IE 11+ with -ms- prefix, all modern browsers)
- **Flexbox** (IE 10+, all modern browsers)
- **CSS Transforms** (IE 9+, all modern browsers)
- **Media Queries** (IE 9+, all modern browsers)

### Fallbacks
The theme includes fallbacks for:
- Custom properties → Hard-coded values for IE
- Grid layout → Flexbox alternatives
- Modern selectors → Traditional class selectors

## Performance Considerations

### CSS Optimization
- Minify CSS for production:
  ```bash
  cssnano bookstack_template/custom.css > custom.min.css
  ```

- Use CSS delivery optimization:
  ```html
  <link rel="preload" href="/themes/custom/custom.css" as="style" onload="this.onload=null;this.rel='stylesheet'">
  ```

### Asset Optimization
- Compress images in the assets directory
- Use WebP format for better compression (with PNG fallbacks)
- Enable gzip compression on your web server

## Maintenance

### Updates
- Backup your custom theme before BookStack updates
- Test theme compatibility after BookStack updates
- Monitor for CSS deprecation warnings in browser console

### Version Control
```bash
# Track theme changes with git
git init bookstack-theme
cp -r bookstack_template/* bookstack-theme/
cd bookstack-theme
git add .
git commit -m "Initial BookStack theme"
```

Generated by Web Style Extractor"""
        
        readme_path = format_dir / 'README.md'
        readme_path.write_text(readme_content, encoding='utf-8')


def get_generator():
    return BookStackGenerator()